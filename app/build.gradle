apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion 31
    //noinspection GradleDependency
    buildToolsVersion "32.0.0"
    defaultConfig {
        applicationId "com.flxrs.dankchat"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 235
        versionName "3.0.14"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    buildFeatures {
        dataBinding = true
    }
    flavorDimensions "localization"
    productFlavors {
        localized {
            dimension "localization"
        }
        free {
            dimension "localization"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
        }
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
        }
        dank {
            initWith debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-dank.pro'
            manifestPlaceholders = [applicationLabel: "@string/app_name_dank"]
            applicationIdSuffix ".dank"
        }
    }
    applicationVariants.all { variant ->
        outputs.all {
            outputFileName = "$apkName-${variant.name}.apk"
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        useIR = true
        jvmTarget = "11"
        freeCompilerArgs += [
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview"
        ]
    }
}

//Properties properties = new Properties()
//if (rootProject.file("local.properties").exists()) {
//    properties.load(rootProject.file("local.properties").newDataInputStream())
//}
//
//try {
//    def read = properties.getProperty("localazy.readKey", "")
//    def write = properties.getProperty("localazy.writeKey", "")
//    if (!read.isEmpty() && !write.isEmpty()) {
//        apply plugin: 'com.localazy.gradle'
//        localazy {
//            readKey read
//            writeKey write
//
//            injection {
//                exclude "**.**"
//                loyalUsersOnly()
//            }
//        }
//    }
//} catch (ignored) {
//}
tasks.all { task ->
    if (task.name.toLowerCase().contains("localazy") && task.name.toLowerCase().contains("free")) {
        task.enabled = false
    }
}

dependencies {
// D8 desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

// Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

// AndroidX
    implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.browser:browser:$browser_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.emoji2:emoji2:$emoji_version"
    implementation "androidx.exifinterface:exifinterface:$exif_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.media:media:$media_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.preference:preference-ktx:$preference_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.viewpager2:viewpager2:$viewpager2_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.webkit:webkit:$webkit_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"


// Dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

// Image loading
    implementation "io.coil-kt:coil:$coil_version"
    implementation "io.coil-kt:coil-gif:$coil_version"
    implementation "pl.droidsonroids.gif:android-gif-drawable:$gif_drawable_version"

// HTTP clients
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"


// Debug
    //dankImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    //dankImplementation "com.github.chuckerteam.chucker:library:$chucker_version"
    //debugImplementation "com.github.chuckerteam.chucker:library-no-op:$chucker_version"
    //releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chucker_version"
}
